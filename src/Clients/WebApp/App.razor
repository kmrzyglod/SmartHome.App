@using SmartHome.Clients.WebApp.Services.Shared.NotificationsHub
@using SmartHome.Application.Shared.Events.Devices.Shared.Error
@using Radzen
@using Microsoft.AspNetCore.Components.Authorization

<CascadingAuthenticationState>
    <Router AppAssembly="typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView  RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>
                            You are not authorized to access 
                            this resource.
                        </p>
                    }
                </NotAuthorized>
                </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="typeof(MainLayout)">
                <LoadingBackground ShowLogoBox="true">
                    <div class="login-body">
                        <h1>We lost this page</h1>
                        <label>We searched high and low but couldn't find what you're looking for</label><br />
                        <MatButton Link="/" Raised="true">Return Home</MatButton>
                    </div>
                </LoadingBackground>
            </LayoutView>
        </NotFound>
    </Router>
    <MatToastContainer />
    <RadzenDialog />
    <RadzenNotification />
</CascadingAuthenticationState>
    @code
{
        [Inject] INotificationsHub NotificationsHub { get; set; }
        [Inject] protected NotificationService ToastrNotificationService { get; set; } = null!;

        private readonly string subscriptionId = Guid.NewGuid().ToString();

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();

            await NotificationsHub.ConnectAsync();
            NotificationsHub.Subscribe<ErrorEvent>(subscriptionId, (evt) =>
            {
                ToastrNotificationService.Notify(NotificationSeverity.Error, "Error", $"Device Id: {evt.Source} Message: {evt.Message} ", duration: 10000);
                return Task.CompletedTask;
            });
        }
    }

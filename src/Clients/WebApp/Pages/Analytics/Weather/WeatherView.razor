@page "/analytics/weather"
@using SmartHome.Clients.WebApp.Shared.Components.DateRangePicker
@using SmartHome.Application.Shared.Queries.WeatherStation.GetTemperature
@using SmartHome.Application.Shared.Queries.WeatherStation.GetWindParameters
@using SmartHome.Application.Shared.Queries.WeatherStation.GetHumidity
@using SmartHome.Application.Shared.Queries.WeatherStation.GetPrecipitation
@using SmartHome.Application.Shared.Queries.WeatherStation.GetPressure
@using SmartHome.Application.Shared.Enums
@inherits WeatherViewModel

<h3>Weather station location: 33-115 Janowice, Poland</h3>
<DxTabs>
    <DxTabPage Text="Temperature">
        <div class="chart-component">
            <DateRangePicker DefaultFromDate="@DefaultFromDateTime" DefaultToDate="@DefaultToDateTime" DateChanged="@OnTemperaturesDatesRangeChanged"></DateRangePicker>
            <DxChart Data="@TemperatureData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Temperature: @context.Point.Value °C</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartLineSeries Name="Average temperature [°C]" ArgumentField="@((TemperatureVm s) => FormatArgument(s.Timestamp, CurrentTemperatureGranulation))" ValueField="@((TemperatureVm s) => s.Temperature)" />
                @if (CurrentTemperatureGranulation >= DateRangeGranulation.Day)
                {
                    <DxChartLineSeries Name="Min temperature [°C]" ArgumentField="@((TemperatureVm s) => FormatArgument(s.Timestamp, CurrentTemperatureGranulation))" ValueField="@((TemperatureVm s) => s.MinTemperature)" />
                    <DxChartLineSeries Name="Max temperature [°C]" ArgumentField="@((TemperatureVm s) => FormatArgument(s.Timestamp, CurrentTemperatureGranulation))" ValueField="@((TemperatureVm s) => s.MaxTemperature)" />
                }
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>
        </div>
    </DxTabPage>
    <DxTabPage Text="Humidity">
        <div class="chart-component">
            <DateRangePicker DefaultFromDate="@DefaultFromDateTime" DefaultToDate="@DefaultToDateTime" DateChanged="@OnHumidityDatesRangeChanged"></DateRangePicker>
            <DxChart Data="@HumidityData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Humidity: @context.Point.Value %</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartLineSeries Name="Average humidity [%]" ArgumentField="@((HumidityVm s) => FormatArgument(s.Timestamp, CurrentHumidityGranulation))" ValueField="@((HumidityVm s) => s.Humidity)" />
                @if (CurrentHumidityGranulation >= DateRangeGranulation.Day)
                {
                    <DxChartLineSeries Name="Min humidity [%]" ArgumentField="@((HumidityVm s) => FormatArgument(s.Timestamp, CurrentHumidityGranulation))" ValueField="@((HumidityVm s) => s.MinHumidity)"/>
                    <DxChartLineSeries Name="Max humidity [%]" ArgumentField="@((HumidityVm s) => FormatArgument(s.Timestamp, CurrentHumidityGranulation))" ValueField="@((HumidityVm s) => s.MaxHumidity)"/>
                }
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>
        </div>
    </DxTabPage>
    <DxTabPage Text="Pressure">
        <div class="chart-component">
            <DateRangePicker DefaultFromDate="@DefaultFromDateTime" DefaultToDate="@DefaultToDateTime" DateChanged="@OnPressureDatesRangeChanged"></DateRangePicker>
            <DxChart Data="@PressureData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Pressure: @context.Point.Value hPa</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartLineSeries Name="Average pressure [hPa]" ArgumentField="@((PressureVm s) => FormatArgument(s.Timestamp, CurrentPressureGranulation))" ValueField="@(s => s.Pressure)" />
                @if (CurrentPressureGranulation >= DateRangeGranulation.Day)
                {
                    <DxChartLineSeries Name="Min pressure [hPa]" ArgumentField="@((PressureVm s) => FormatArgument(s.Timestamp, CurrentPressureGranulation))" ValueField="@((PressureVm s) => s.MinPressure)"/>
                    <DxChartLineSeries Name="Max pressure [hPa]" ArgumentField="@((PressureVm s) => FormatArgument(s.Timestamp, CurrentPressureGranulation))" ValueField="@((PressureVm s) => s.MaxPressure)"/>
                }
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>
        </div>
    </DxTabPage>
    <DxTabPage Text="Wind">
        <div class="chart-component">
            <DateRangePicker DefaultFromDate="@DefaultFromDateTime" DefaultToDate="@DefaultToDateTime" DateChanged="@OnWindDatesRangeChanged"></DateRangePicker>
            <DxChart Data="@WindData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Wind speed: @context.Point.Value m/s</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartLineSeries Name="Average wind speed [m/s]" ArgumentField="@((WindParametersVm s) => FormatArgument(s.Timestamp, CurrentWindGranulation))" ValueField="@((WindParametersVm s) => s.AverageWindSpeed)" />
                <DxChartLineSeries Name="Min wind speed [m/s]" ArgumentField="@((WindParametersVm s) => FormatArgument(s.Timestamp, CurrentWindGranulation))" ValueField="@((WindParametersVm s) => s.MinWindSpeed)" />
                <DxChartLineSeries Name="Max wind speed [m/s]" ArgumentField="@((WindParametersVm s) => FormatArgument(s.Timestamp, CurrentWindGranulation))" ValueField="@((WindParametersVm s) => s.MaxWindSpeed)" />
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>

            <DxChart Data="@WindData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Wind direction: @context.Point.Value</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartScatterSeries Name="Most frequent wind direction" ArgumentField="@((WindParametersVm s) => FormatArgument(s.Timestamp, CurrentWindGranulation))" ValueField="@((WindParametersVm s) => s.MostFrequentWindDirection.ToString())" />
                <DxChartValueAxis Name="ValueAxis" Position="HorizontalEdge.Left">
                    <DxChartAxisTitle Text="Wind speed [m/s]"></DxChartAxisTitle>
                </DxChartValueAxis>
                <DxChartValueAxis Type="ChartAxisType.Auto" Name="WindDirectionAxis" Position="HorizontalEdge.Right">
                    <DxChartAxisTitle Text="Wind direction"></DxChartAxisTitle>
                </DxChartValueAxis>
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>
        </div>
    </DxTabPage>
    <DxTabPage Text="Precipitation">
        <div class="chart-component">
            <DateRangePicker DefaultFromDate="@DefaultFromDateTime" DefaultToDate="@DefaultToDateTime" DateChanged="@OnPrecipitationDatesRangeChanged"></DateRangePicker>
            <DxChart Data="@PrecipitationData">
                <DxChartTooltip>
                    <div class="p-3">
                        <p>Rain sum: @context.Point.Value mm</p>
                        <p>Timestamp: @context.Point.Argument</p>
                    </div>
                </DxChartTooltip>
                <DxChartBarSeries Name="Rain [mm]" ArgumentField="@((PrecipitationVm s) => FormatArgument(s.Timestamp, CurrentPrecipitationGranulation))" ValueField="@(s => s.RainSum)" />
                <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
            </DxChart>
        </div>
    </DxTabPage>
</DxTabs>



        @code {


        }

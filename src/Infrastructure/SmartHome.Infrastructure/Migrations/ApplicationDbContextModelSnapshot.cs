// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHome.Infrastructure.Persistence;

namespace SmartHome.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartHome.Domain.Entities.Devices.WeatherStation.Air", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<System.DateTime>("MeasurementEndTime")
                        .HasColumnType("datetime2");

                    b.Property<System.DateTime>("MeasurementStartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeatherStationAir");
                });

            modelBuilder.Entity("SmartHome.Domain.Entities.Devices.WeatherStation.Precipitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<System.DateTime>("MeasurementEndTime")
                        .HasColumnType("datetime2");

                    b.Property<System.DateTime>("MeasurementStartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rain")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeatherStationPrecipitation");
                });

            modelBuilder.Entity("SmartHome.Domain.Entities.Devices.WeatherStation.Sun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("LightLevelInLux")
                        .HasColumnType("float");

                    b.Property<System.DateTime>("MeasurementEndTime")
                        .HasColumnType("datetime2");

                    b.Property<System.DateTime>("MeasurementStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherStationSun");
                });

            modelBuilder.Entity("SmartHome.Domain.Entities.Devices.WeatherStation.Wind", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("float");

                    b.Property<int>("CurrentWindDirection")
                        .HasColumnType("int");

                    b.Property<double>("MaxWindSpeed")
                        .HasColumnType("float");

                    b.Property<System.DateTime>("MeasurementEndTime")
                        .HasColumnType("datetime2");

                    b.Property<System.DateTime>("MeasurementStartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("MinWindSpeed")
                        .HasColumnType("float");

                    b.Property<int>("MostFrequentWindDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeatherStationWind");
                });
#pragma warning restore 612, 618
        }
    }
}
